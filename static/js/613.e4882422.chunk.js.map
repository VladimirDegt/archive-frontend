{"version":3,"file":"static/js/613.e4882422.chunk.js","mappings":"yXAEaA,EAAeC,EAAAA,KAAaC,MAAM,CAC7CC,KAAMF,EAAAA,KACLG,QAAQ,yFAA8B,sKACnCC,IAAI,EAAG,iOACPC,IAAI,GAAI,kHACRC,SAAS,oKACbC,SAAUP,EAAAA,KACNI,IAAI,EAAG,iOACPC,IAAI,GAAI,kHACRC,SAAS,oKACZE,MAAOR,EAAAA,KAENK,IAAI,GAAI,iOACRG,MAAM,+FACNL,QAAQ,4CAA6C,+FACrDG,SAAS,sK,iDCIAG,EAAe,WAC1B,OAAkCC,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAsCF,EAAAA,EAAAA,UAAS,IAA/C,eAAOG,EAAP,KAAoBC,EAApB,KACA,GAAmBC,EAAAA,EAAAA,MAAZC,GAAP,eACMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAoB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC3BN,EAAeM,EAAOC,MACvB,EAEKC,EAAc,WAClBL,EAAS,WAAY,CAAEM,SAAS,GACjC,EAEKC,EAAY,mCAAG,WAAOC,EAAP,mFAAiBC,EAAjB,EAAiBA,UAAjB,SAEjBd,GAAa,GAFI,SAGMI,GAAS,kBAAIS,GAAL,IAAaE,OAAQd,KAHnC,UAGXe,EAHW,OAIjBhB,GAAa,IAETgB,EAASC,KANI,wBAOfC,EAAAA,OAAAA,QAAe,wIAA2B,CACxCC,SAAU,aACVC,SAAU,SAEZN,IAEAT,EAAS,WAAY,CAAEM,SAAS,IAbjB,2BAgBjBO,EAAAA,OAAAA,QAAA,UAAkBF,EAASK,MAAMJ,KAAKK,SAAW,CAC/CH,SAAU,aACVC,SAAU,SAlBK,kDAqBjBF,EAAAA,OAAAA,QAAA,UAAkB,KAAMI,SAAW,CACjCH,SAAU,aACVC,SAAU,SAvBK,0DAAH,wDAkClB,OACE,SAACG,EAAA,EAAD,CAAQC,MAAM,EAAO,kBAAgB,eAArC,SACGzB,GACC,SAAC0B,EAAA,EAAD,CAAcC,SAAU,EAAGC,GAAI,CAAEC,SAAU,QAE3C,SAAC,KAAD,CACEC,cAZc,CACpBvC,KAAM,GACNM,MAAO,GACPD,SAAU,IAUJmC,SAAUlB,EACVmB,iBAAkB5C,EAHpB,SAKG,gBAAG6C,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACC,UAAC,KAAD,YACE,SAACC,EAAA,EAAD,CAAaC,GAAG,eAAeR,GAAI,CAAES,UAAW,UAAhD,2BAGA,UAACC,EAAA,EAAD,YACE,SAAC,KAAD,CACEC,WAAS,EACTC,GAAIC,EAAAA,EACJC,OAAO,QACPnD,KAAK,OACLoD,MAAM,OACNC,KAAK,OACLC,WAAS,IAEVZ,EAAO1C,MAAQ2C,EAAQ3C,MACtB,SAACuD,EAAA,EAAD,CAAYC,WAAS,EAACnB,GAAI,CAAEoB,MAAOC,EAAAA,EAAAA,KAAUpB,SAAU,KAAvD,SACGI,EAAO1C,OAER,MACJ,SAAC,KAAD,CACEiD,GAAIC,EAAAA,EACJC,OAAO,QACPnD,KAAK,QACLoD,MAAM,QACNC,KAAK,QACLC,WAAS,IAEVZ,EAAOpC,OAASqC,EAAQrC,OACvB,SAACiD,EAAA,EAAD,CAAYC,WAAS,EAACnB,GAAI,CAAEoB,MAAOC,EAAAA,EAAAA,MAAnC,SACGhB,EAAOpC,QAER,MACJ,SAAC,KAAD,CACE2C,GAAIC,EAAAA,EACJC,OAAO,QACPnD,KAAK,WACLoD,MAAM,WACNC,KAAK,WACLC,WAAS,IAEVZ,EAAOrC,UAAYsC,EAAQtC,UAC1B,SAACkD,EAAA,EAAD,CAAYC,WAAS,EAACnB,GAAI,CAAEoB,MAAOC,EAAAA,EAAAA,MAAnC,SACGhB,EAAOrC,WAER,MACJ,SAACsD,EAAA,EAAD,CAAYd,GAAG,gBAAf,oDACJ,UAACe,EAAA,EAAD,CACEC,QAAQ,gBACR1C,MAAOR,EACPwC,OAAO,QACPnD,KAAK,cACLqD,KAAK,OACLC,WAAS,EACTQ,SAAU7C,EACVb,UAAQ,EARV,WAUE,SAAC2D,EAAA,EAAD,CAAU5C,MAAM,YAAhB,qEACA,SAAC4C,EAAA,EAAD,CAAU5C,MAAM,OAAhB,iFAGA,UAAC6C,EAAA,EAAD,CACE3B,GAAI,CACF4B,aAAc,EACdC,YAAa,EACbC,eAAgB,UAJpB,WAOE,SAACC,EAAA,EAAD,CAAQC,QAASjD,EAAjB,qBACA,SAACgD,EAAA,EAAD,CAAQf,KAAK,SAAb,0BArEL,KA6EV,C,iGC1JYlB,EAAe,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC7B,OACE,UAAC,IAAD,CACEkC,SAAS,KACTjC,GAAI,CACFkC,QAAS,OACTJ,eAAgB,SAChBK,cAAe,SACfC,WAAY,SACZC,IAAK,EACLC,UAAW,EACXC,aAAc,GATlB,WAYE,SAAC,IAAD,CACEC,UAAU,OACVC,QAAQ,UACRzC,GAAI,CAAEC,SAAU,IAAKyC,MAAO,QAC5BC,OAAQ,MAET,OAAIC,MAAM7C,IAAW8C,KAAI,SAACC,EAAGC,GAAJ,OACxB,SAAC,IAAD,CACEN,QAAQ,UACRD,UAAU,OACVxC,GAAI,CAAEC,SAAU,IAAKyC,MAAO,QAC5BC,OAAQ,IACHI,EANiB,KAS1B,SAAC,IAAD,CACEP,UAAU,OACVC,QAAQ,UACRzC,GAAI,CAAEC,SAAU,IAAKyC,MAAO,QAC5BC,OAAQ,OAIf,C,6FCjCOzE,EAAiB8E,EAAQ,KAAzB9E,aAuBR,UArBA,WACI,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAO8E,EAAP,KAAeC,EAAf,KACQC,GAAUC,EAAAA,EAAAA,IAAYC,EAAAA,IAAtBF,MACFG,GAAaF,EAAAA,EAAAA,IAAYG,EAAAA,IACzB7E,GAAWC,EAAAA,EAAAA,MAUjB,OARA6E,EAAAA,EAAAA,YAAU,WACFL,GAAwB,UAAfG,EACTJ,GAAU,GAGdxE,EAAS,WAAY,CAAEM,SAAS,GACnC,GAAE,CAACiE,EAAQE,EAAOG,EAAY5E,KAG3B,8BACKuE,IAAU,SAAC/E,EAAD,KAGtB,C","sources":["schemas/validate-register.js","components/RegistrForm/RegistrForm.jsx","components/Skeletons/SkeletonAuth.jsx","pages/Admin/Admin.jsx"],"sourcesContent":["import * as Yup from 'yup';\n\nexport const SignupSchema = Yup.object().shape({\n  name: Yup.string()\n  .matches(/^[A-Za-zА-Яа-яІіЇїЄєҐґ']+$/, \"Ім'я повинно бути тільки з літер\")\n     .min(2, 'Довжина повинна бути більше двох символів')\n     .max(30, 'Дуже багато символів')\n     .required(\"Поле обов'язкове до заповнення\"),\n  password: Yup.string()\n     .min(2, 'Довжина повинна бути більше двох символів')\n     .max(30, 'Дуже багато символів')\n     .required(\"Поле обов'язкове до заповнення\"),\n   email: Yup\n   .string()\n   .max(50, 'Довжина повинна бути більше двох символів')\n   .email('Невірний формат email')\n   .matches(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i, 'Невірний формат email')\n   .required(\"Поле обов'язкове до заповнення\"),\n });\n\n \n","import { Formik, Form, Field } from 'formik';\nimport { Notify } from 'notiflix';\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  TextField,\n  Typography,\n  InputLabel,\n  MenuItem,\n  Select,\n} from '@mui/material';\nimport { useRegisterMutation } from 'utils/RTK-Query';\nimport { SignupSchema } from 'schemas/validate-register';\nimport { red } from '@mui/material/colors';\nimport { useState } from 'react';\nimport { SkeletonAuth } from 'components/Skeletons/SkeletonAuth';\nimport { useNavigate } from 'react-router-dom';\n\nexport const RegisterForm = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [fieldStatus, setFieldStatus] = useState('');\n  const [register] = useRegisterMutation();\n  const navigate = useNavigate();\n\n  const handleFieldStatus = ({ target }) => {\n    setFieldStatus(target.value);\n  };\n\n  const handleClose = () => {\n    navigate('/archive', { replace: true });\n  }\n\n  const handleSubmit = async (values, { resetForm }) => {\n    try {\n      setIsLoading(true);\n      const response = await register({...values, status: fieldStatus});\n      setIsLoading(false);\n      \n      if (response.data) {\n        Notify.success('Користувач зареєстрован', {\n          position: 'center-top',\n          distance: '10px',\n        });\n        resetForm();\n        // handleClose();\n        navigate('/archive', { replace: true });\n        return;\n      }\n      Notify.failure(`${response.error.data.message}`, {\n        position: 'center-top',\n        distance: '10px',\n      });\n    } catch (error) {\n      Notify.failure(`${error.message}`, {\n        position: 'center-top',\n        distance: '10px',\n      });\n    }\n  };\n\n  const initialValues = {\n    name: '',\n    email: '',\n    password: '',\n  };\n\n  return (\n    <Dialog open={true}  aria-labelledby=\"registration\" >\n      {isLoading ? (\n        <SkeletonAuth totalRow={3} sx={{ minWidth: 552 }}/>\n      ) : (\n        <Formik\n          initialValues={initialValues}\n          onSubmit={handleSubmit}\n          validationSchema={SignupSchema}\n        >\n          {({ errors, touched }) => (\n            <Form>\n              <DialogTitle id=\"registration\" sx={{ textAlign: 'center' }}>\n                Registration\n              </DialogTitle>\n              <DialogContent>\n                <Field\n                  autoFocus\n                  as={TextField}\n                  margin=\"dense\"\n                  name=\"name\"\n                  label=\"Name\"\n                  type=\"text\"\n                  fullWidth\n                />\n                {errors.name && touched.name ? (\n                  <Typography paragraph sx={{ color: red[500], minWidth: 552 }}>\n                    {errors.name}\n                  </Typography>\n                ) : null}\n                <Field\n                  as={TextField}\n                  margin=\"dense\"\n                  name=\"email\"\n                  label=\"Email\"\n                  type=\"email\"\n                  fullWidth\n                />\n                {errors.email && touched.email ? (\n                  <Typography paragraph sx={{ color: red[500] }}>\n                    {errors.email}\n                  </Typography>\n                ) : null}\n                <Field\n                  as={TextField}\n                  margin=\"dense\"\n                  name=\"password\"\n                  label=\"Password\"\n                  type=\"password\"\n                  fullWidth\n                />\n                {errors.password && touched.password ? (\n                  <Typography paragraph sx={{ color: red[500] }}>\n                    {errors.password}\n                  </Typography>\n                ) : null}\n                <InputLabel id=\"status-search\">Статус:</InputLabel>\n            <Select\n              labelId=\"status-search\"\n              value={fieldStatus}\n              margin=\"dense\"\n              name=\"fieldStatus\"\n              type=\"text\"\n              fullWidth\n              onChange={handleFieldStatus}\n              required\n            >\n              <MenuItem value=\"moderator\">Модератор</MenuItem>\n              <MenuItem value=\"user\">Користувач</MenuItem>\n            </Select>\n              </DialogContent>\n              <DialogActions\n                sx={{\n                  paddingRight: 3,\n                  paddingLeft: 3,\n                  justifyContent: 'center',\n                }}\n              >\n                <Button onClick={handleClose}>Cancel</Button>\n                <Button type=\"submit\">Sign Up</Button>\n              </DialogActions>\n            </Form>\n          )}\n        </Formik>\n      )}\n    </Dialog>\n  );\n};\n","import { Container, Skeleton } from '@mui/material';\n\nexport const SkeletonAuth = ({ totalRow }) => {\n  return (\n    <Container\n      maxWidth=\"xl\"\n      sx={{\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        alignItems: 'center',\n        gap: 2,\n        marginTop: 2,\n        marginBottom: 2,\n      }}\n    >\n      <Skeleton\n        animation=\"wave\"\n        variant=\"rounded\"\n        sx={{ minWidth: 300, width: '100%' }}\n        height={30}\n      />\n      {[...Array(totalRow)].map((_, index) => (\n        <Skeleton\n          variant=\"rounded\"\n          animation=\"wave\"\n          sx={{ minWidth: 300, width: '100%' }}\n          height={73}\n          key={index}\n        />\n      ))}\n      <Skeleton\n        animation=\"wave\"\n        variant=\"rounded\"\n        sx={{ minWidth: 300, width: '100%' }}\n        height={30}\n      />\n    </Container>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { selectStatusUser, selectToken } from \"redux/users/selectors\";\n\n\nconst { RegisterForm } = require(\"components/RegistrForm/RegistrForm\");\n\nfunction Admin () {\n    const [isOpen, setIsOpen] = useState('');\n    const { token } = useSelector(selectToken);\n    const statusUser = useSelector(selectStatusUser);\n    const navigate = useNavigate();\n\n    useEffect(()=>{\n        if((token && statusUser === 'admin') ) {\n            setIsOpen(true)\n            return\n        }\n        navigate('/archive', { replace: true });\n    }, [isOpen, token, statusUser, navigate])\n\n    return (\n        <>\n            {isOpen && <RegisterForm/> }\n        </>\n    )\n}\n\nexport default Admin;"],"names":["SignupSchema","Yup","shape","name","matches","min","max","required","password","email","RegisterForm","useState","isLoading","setIsLoading","fieldStatus","setFieldStatus","useRegisterMutation","register","navigate","useNavigate","handleFieldStatus","target","value","handleClose","replace","handleSubmit","values","resetForm","status","response","data","Notify","position","distance","error","message","Dialog","open","SkeletonAuth","totalRow","sx","minWidth","initialValues","onSubmit","validationSchema","errors","touched","DialogTitle","id","textAlign","DialogContent","autoFocus","as","TextField","margin","label","type","fullWidth","Typography","paragraph","color","red","InputLabel","Select","labelId","onChange","MenuItem","DialogActions","paddingRight","paddingLeft","justifyContent","Button","onClick","maxWidth","display","flexDirection","alignItems","gap","marginTop","marginBottom","animation","variant","width","height","Array","map","_","index","require","isOpen","setIsOpen","token","useSelector","selectToken","statusUser","selectStatusUser","useEffect"],"sourceRoot":""}